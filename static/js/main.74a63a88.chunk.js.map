{"version":3,"sources":["components/NewTaskForm.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["NewTaskForm","id","addItemCallback","useState","text","task","setTaskName","onSubmit","e","console","log","preventDefault","placeholder","value","onChange","target","key","Date","isDone","Button","type","variant","TaskList","tasks","deleteTaskCallback","taskCompleteCallback","nameChangeCallback","map","taskItem","className","taskKey","onTaskNameChange","onClick","name","checked","App","setItems","filteredTasks","filter","updatedTasks","newTaskName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAGe,SAASA,EAAT,GAA4C,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,gBAAiB,EAC1BC,mBAAS,CAACC,KAAK,KADW,mBAC/CC,EAD+C,KACzCC,EADyC,KActD,OACI,0BAAML,GAAIA,EAAIM,SARlB,SAAwBC,GACpBN,EAAgBG,GAChBI,QAAQC,IAAIL,GACZC,EAAY,CAACF,KAAK,KAClBI,EAAEG,mBAKE,2BACIC,YAAc,WACdC,MAASR,EAAKD,KACdU,SAhBZ,SAA8BN,GAC1BF,EAAY,2BAAID,GAAL,IAAWD,KAAOI,EAAEO,OAAOF,MAAOG,IAAK,IAAIC,KAAQC,QAAO,QAiBjE,kBAACC,EAAA,EAAD,CAAQC,KAAK,SAASC,QAAQ,aAA9B,Q,2BCpBG,SAASC,EAAT,GAAyF,IAAtEC,EAAqE,EAArEA,MAAOC,EAA8D,EAA9DA,mBAAoBC,EAA0C,EAA1CA,qBAAsBC,EAAoB,EAApBA,mBAc/E,OAAOH,EAAMI,KAAI,SAAAC,GACb,OACA,yBACAvB,KAAQuB,EACRC,UAAW,OACXb,IAAOY,EAASZ,KACZ,2BAAG,2BACHI,KAAK,OACJnB,GAAM2B,EAASZ,IACfH,MAAOe,EAASxB,KAChBU,SAAU,SAACN,GAAD,OAdnB,SAA0BA,EAAGsB,GACzBJ,EAAmBlB,EAAEO,OAAOF,MAAOiB,GAabC,CAAiBvB,EAAGoB,EAASZ,QAC/C,0BAAMf,GAAG,UACL,kBAAC,IAAD,CAAQ+B,QAAS,kBAxBTF,EAwB0BF,EAASZ,SAvBnDQ,EAAmBM,GADvB,IAAoBA,MA0BZ,0BAAM7B,GAAG,YACL,2BAAOmB,KAAK,WAAWa,KAAK,OAC5BnB,SAAU,kBAxBEgB,EAwBmBF,EAASZ,SAvBhDS,EAAqBK,GADzB,IAAwBA,GAyBZI,QAAWN,EAASV,eCwBrBiB,MAnDf,WAAgB,IAAD,EAEahC,mBAAS,IAFtB,mBAENoB,EAFM,KAECa,EAFD,KAsCb,OACE,yBAAKP,UAAY,OACf,gCACE,kBAAC7B,EAAD,CAAaC,GAAG,gBAAgBC,gBArCtC,SAAiBG,GACE,KAAdA,EAAKD,MACNgC,EAAS,GAAD,mBAAKb,GAAL,CAAYlB,KAEtBI,QAAQC,IAAIa,OAmCV,kBAAC,EAAD,CAAUA,MAASA,EACnBC,mBAjCJ,SAAoBM,GAClB,IAAMO,EAAgBd,EAAMe,QAAO,SAAAjC,GAAI,OAAIA,EAAKW,MAAQc,KACxDrB,QAAQC,IAAI,UAAW2B,GACvBD,EAASC,IA+BPZ,qBA5BJ,SAAyBK,GACvB,IAAMS,EAAehB,EAAMI,KAAI,SAAAtB,GAI7B,OAHGA,EAAKW,MAAQc,IACdzB,EAAKa,QAAUb,EAAKa,QAEfb,KAETI,QAAQC,IAAI,UAAW6B,GACvBH,EAASG,IAqBPb,mBAlBJ,SAA2Bc,EAAaV,GACtC,IAAMS,EAAehB,EAAMI,KAAI,SAAAtB,GAI7B,OAHGA,EAAKW,MAAQc,IACdzB,EAAKD,KAAOoC,GAEPnC,KAET+B,EAASG,QC/BOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.74a63a88.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport Button from '@material-ui/core/Button'\n\nexport default function NewTaskForm({id, addItemCallback}){\n    const [task, setTaskName] = useState({text:''})\n\n    function handleTaskNameChange(e){\n        setTaskName({...task, text : e.target.value, key: new Date(), isDone:false});\n    }\n    \n    function handleOnSubmit(e){\n        addItemCallback(task)\n        console.log(task)\n        setTaskName({text:''});\n        e.preventDefault();\n    }\n\n    return(\n        <form id={id} onSubmit={handleOnSubmit}>\n            <input\n                placeholder = \"New Task\"\n                value = {task.text}\n                onChange = {handleTaskNameChange}\n            />\n            <Button type=\"submit\" variant=\"contained\">Add</Button>\n        </form>\n    );\n}","import React from 'react'\nimport '../styling/TaskList.css'\nimport Delete from '@material-ui/icons/Delete'\n\nexport default function TaskList({tasks, deleteTaskCallback, taskCompleteCallback, nameChangeCallback}){\n\n    function deleteTask(taskKey){\n        deleteTaskCallback(taskKey)\n    }\n\n    function onTaskComplete(taskKey){\n        taskCompleteCallback(taskKey)\n    }\n\n    function onTaskNameChange(e, taskKey){\n        nameChangeCallback(e.target.value, taskKey)\n    }\n\n    return(tasks.map(taskItem => {\n        return (\n        <div \n        task = {taskItem} \n        className =\"task\" \n        key = {taskItem.key}>\n            <p><input \n            type=\"text\"\n             id = {taskItem.key} \n             value={taskItem.text}\n             onChange={(e) => onTaskNameChange(e, taskItem.key)}/>\n            <span id=\"delete\">\n                <Delete onClick={() => deleteTask(taskItem.key)}/>\n            </span>\n            <span id=\"checkbox\">\n                <input type=\"checkbox\" name=\"Done\"\n                onChange={() => onTaskComplete(taskItem.key)}\n                checked = {taskItem.isDone}\n                />\n            </span> \n            </p>\n           \n        </div>\n        );\n                }));\n}","import React,{useState} from 'react';\nimport './App.css';\nimport NewTaskForm from './components/NewTaskForm'\nimport TaskList from './components/TaskList';\n\n\n\n\nfunction App() {\n\n  const [tasks, setItems] = useState([])\n\n  function addItem(task){\n    if(task.text !== \"\"){\n      setItems([...tasks, task])\n    }\n    console.log(tasks)\n  }\n\n  function deleteItem(taskKey){\n    const filteredTasks = tasks.filter(task => task.key !== taskKey);\n    console.log(\"deleted\", filteredTasks)\n    setItems(filteredTasks)\n  }\n\n  function onItemCompleted(taskKey){\n    const updatedTasks = tasks.map(task => {\n      if(task.key === taskKey){\n        task.isDone = !task.isDone;\n      }\n      return task\n    });\n    console.log(\"updated\", updatedTasks)\n    setItems(updatedTasks)\n  }\n\n  function onTaskNameChanged(newTaskName, taskKey){\n    const updatedTasks = tasks.map(task => {\n      if(task.key === taskKey){\n        task.text = newTaskName\n      }\n      return task\n    });\n    setItems(updatedTasks)\n  }\n\n  return (\n    <div className = \"App\">\n      <header>\n        <NewTaskForm id=\"new-task-form\" addItemCallback = {addItem}/>\n      </header>\n      <TaskList tasks = {tasks} \n      deleteTaskCallback = {deleteItem}\n      taskCompleteCallback = {onItemCompleted}\n      nameChangeCallback = {onTaskNameChanged}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}